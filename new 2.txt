import os
import re
import io
import pandas as pd
import fitz  # PyMuPDF
import aspose.pdf as ap
from openpyxl import load_workbook
from PyPDF2 import PdfReader

# === CONFIGURATION ===
pdf_folder = r"C:\Users\TAQ7353\UTR\LOB_ActivitySummary_FillingRate\test"
converted_folder = os.path.join(pdf_folder, "converted_excels")
output_summary = os.path.join(pdf_folder, "activity_summary_results_Universal.xlsx")

os.makedirs(converted_folder, exist_ok=True)


# === FUNCTION 1: Try to extract embedded Excel stream ===
def extract_embedded_excel_stream(pdf_path):
    try:
        with fitz.open(pdf_path) as doc:
            for xref in range(1, doc.xref_length()):
                try:
                    obj = doc.xref_object(xref)
                    if ".xlsx" in obj:
                        match = re.search(r"/F\s*\(([^)]+\.xlsx)\)", obj)
                        if match:
                            stream_ref = xref
                            excel_bytes = doc.xref_stream(stream_ref)
                            filename = match.group(1)
                            return excel_bytes, filename
                except Exception:
                    continue
        return None, None
    except Exception as e:
        print(f"‚ùå Error scanning {pdf_path}: {e}")
        return None, None


# === FUNCTION 2: Convert Excel-generated PDF ‚Üí Excel (Aspose) ===
def convert_pdf_to_excel(pdf_path, excel_path):
    try:
        doc = ap.Document(pdf_path)
        doc.convert_pages_to_one_sheet = True  # ‚úÖ Merge all PDF pages into one sheet
        doc.save(excel_path, ap.SaveFormat.EXCEL)
        return True
    except Exception as e:
        print(f"‚ùå Failed to convert {os.path.basename(pdf_path)}: {e}")
        return False


# === FUNCTION 3: Extract ‚ÄúSummary of Activity‚Äù note from Excel ===
def extract_summary_from_excel(excel_path):
    try:
        wb = load_workbook(excel_path, data_only=True)
        ws = wb.active

        for row in ws.iter_rows():
            for cell in row:
                val = str(cell.value).strip() if cell.value else ""
                if re.search(r"\bSummary\s*of\s*Activity\b", val, re.IGNORECASE):
                    below_row = cell.row + 1
                    below_val = ws.cell(row=below_row, column=cell.column).value

                    # Look ahead a few rows if empty
                    if not below_val:
                        for offset in range(2, 8):
                            next_val = ws.cell(row=below_row + offset, column=cell.column).value
                            if next_val:
                                below_val = next_val
                                break
                    if below_val:
                        return str(below_val).strip()
        return "Not found"
    except Exception as e:
        return f"Error reading Excel: {e}"


# === FUNCTION 4: Fallback ‚Äî Extract directly from PDF text ===
def extract_summary_from_pdf_text(pdf_path):
    try:
        reader = PdfReader(pdf_path)
        text = ""
        for page in reader.pages:
            text += page.extract_text() + "\n"

        match = re.search(r"Summary\s*of\s*Activity[:\s\-]*([\s\S]{0,1500})", text, re.IGNORECASE)
        if match:
            snippet = match.group(1).split("\n")[0].strip()
            return snippet or "No text found"
        else:
            return "No 'Summary of Activity' section found"
    except Exception as e:
        return f"Error reading PDF: {e}"


# === MAIN PROCESS ===
results = []

for file in os.listdir(pdf_folder):
    if not file.lower().endswith(".pdf"):
        continue

    pdf_path = os.path.join(pdf_folder, file)
    print(f"\nüìÑ Processing: {file}")
    summary = None

    # Step 1: Try to extract embedded Excel
    excel_bytes, excel_filename = extract_embedded_excel_stream(pdf_path)
    if excel_bytes:
        extracted_path = os.path.join(converted_folder, f"embedded_{excel_filename}")
        with open(extracted_path, "wb") as f:
            f.write(excel_bytes)
        print(f"üß© Found embedded Excel: {excel_filename}")
        summary = extract_summary_from_excel(extracted_path)

    # Step 2: If no embedded Excel, reconstruct Excel from PDF
    if not summary or summary.strip() in ["", "Not found", "Error"]:
        excel_output = os.path.join(converted_folder, file.replace(".pdf", ".xlsx"))
        if convert_pdf_to_excel(pdf_path, excel_output):
            print(f"‚úÖ Reconstructed Excel: {excel_output}")
            summary = extract_summary_from_excel(excel_output)
        else:
            print("‚ö†Ô∏è Conversion failed")

    # Step 3: Fallback to text extraction
    if not summary or summary.strip() in ["", "Not found", "Error"]:
        print("üîç Falling back to text extraction...")
        summary = extract_summary_from_pdf_text(pdf_path)

    results.append({"PDF_File_Name": file, "Activity_Summary": summary})

# === SAVE RESULTS ===
df = pd.DataFrame(results)
df.to_excel(output_summary, index=False)
print(f"\n‚úÖ Extraction complete! Results saved to: {output_summary}")
