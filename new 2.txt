import os
import re
import io
import aspose.pdf as ap
import pandas as pd
import fitz  # PyMuPDF
from PyPDF2 import PdfReader
from openpyxl import load_workbook

# === CONFIGURATION ===
pdf_folder = r"C:\Users\TAQ7353\UTR\LOB_ActivitySummary_FillingRate\test"  # your folder
converted_folder = os.path.join(pdf_folder, "converted_excels")
output_file = os.path.join(pdf_folder, "activity_summary_results_Combined.xlsx")

os.makedirs(converted_folder, exist_ok=True)

# === FUNCTION 1: Extract embedded Excel data stream ===
def extract_embedded_excel_stream(pdf_path):
    """
    Searches for embedded Excel streams inside the PDF and extracts the first one found.
    Returns (excel_bytes, filename) or (None, None) if not found.
    """
    with fitz.open(pdf_path) as doc:
        for xref in range(1, doc.xref_length()):
            try:
                obj = doc.xref_object(xref)
                if ".xlsx" in obj:
                    match = re.search(r"/F\s*\(\s*(\S+\.xlsx)\s*\)", obj)
                    if match:
                        stream_ref = xref  # fix: use xref directly instead of int(match.group(1))
                        excel_bytes = doc.xref_stream(stream_ref)
                        name_match = re.search(r"\(([\w\d\-\.]+\.xlsx)\)", obj)
                        filename = name_match.group(1) if name_match else "embedded.xlsx"
                        return excel_bytes, filename
            except Exception:
                pass
    return None, None


# === FUNCTION 2: Extract summary from Excel bytes ===
def extract_summary_from_excel_bytes(excel_bytes):
    """
    Reads merged cell range C39:I41 from Excel binary data.
    """
    try:
        wb = load_workbook(io.BytesIO(excel_bytes), data_only=True)
        ws = wb.active
        text_values = []
        for row in ws.iter_rows(min_row=39, max_row=41, min_col=3, max_col=9):
            for cell in row:
                if cell.value:
                    text_values.append(str(cell.value))
        text = " ".join(text_values).strip()
        return text
    except Exception as e:
        return f"Error reading Excel: {e}"


# === FUNCTION 3: Convert PDF ‚á¢ Excel (Aspose) ===
def convert_pdf_to_excel(pdf_path, excel_path):
    try:
        doc = ap.Document(pdf_path)
        doc.save(excel_path, ap.SaveFormat.EXCEL)
        return True
    except Exception as e:
        print(f"‚ùå Failed to convert {os.path.basename(pdf_path)}: {e}")
        return False


# === FUNCTION 4: Extract "Summary of Activity" note from Excel ===
def extract_summary_from_excel_file(excel_path):
    try:
        wb = load_workbook(excel_path, data_only=True)
        ws = wb.active

        # Loop through cells to find "Summary of Activity"
        for row in ws.iter_rows():
            for cell in row:
                val = str(cell.value).strip() if cell.value else ""
                if re.search(r"\bsummary\s+of\s+activity\b", val, re.IGNORECASE):
                    below_row = cell.row + 1
                    below_val = ws.cell(row=below_row, column=cell.column).value

                    # If the next cell is empty, try merged regions or a few rows below
                    if not below_val:
                        for offset in range(2, 6):
                            next_val = ws.cell(row=below_row + offset, column=cell.column).value
                            if next_val:
                                below_val = next_val
                                break

                    if below_val:
                        return str(below_val).strip()

        return "Not found"

    except Exception as e:
        return f"Error reading Excel: {e}"


# === FUNCTION 5: Fallback ‚Äî Extract directly from PDF text ===
def extract_summary_from_pdf_text(pdf_path):
    """
    Fallback: If no Excel file found, read PDF text and look for summary-like patterns.
    """
    try:
        reader = PdfReader(pdf_path)
        text = ""
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + " "

        match = re.search(r"(Account\s+Closeout|Summary\s+of\s+Activity[-:\.]?\s+.+)", text, re.IGNORECASE)
        if match:
            return match.group(0).strip()
        return None
    except Exception as e:
        return f"Error reading PDF text: {e}"


# === MAIN PROCESS ===
results = []

for file in os.listdir(pdf_folder):
    if not file.lower().endswith(".pdf"):
        continue

    pdf_path = os.path.join(pdf_folder, file)
    print(f"\n‚ñ∂ Processing: {file}")

    summary = None

    # Step 1Ô∏è‚É£: Try to extract embedded Excel
    excel_bytes, excel_filename = extract_embedded_excel_stream(pdf_path)
    if excel_bytes:
        print(f"  ‚úì Found embedded Excel: {excel_filename}")
        summary = extract_summary_from_excel_bytes(excel_bytes)

        # Optional: Save extracted Excel
        extracted_path = os.path.join(pdf_folder, f"extracted_{excel_filename}")
        with open(extracted_path, "wb") as f:
            f.write(excel_bytes)
        print(f"  üíæ Saved attachment as: {extracted_path}")

    # Step 2Ô∏è‚É£: If no embedded Excel, convert the PDF into Excel
    if not excel_bytes:
        excel_output = os.path.join(converted_folder, file.replace(".pdf", ".xlsx"))
        if convert_pdf_to_excel(pdf_path, excel_output):
            print(f"  ‚úÖ Converted to Excel: {excel_output}")
            summary = extract_summary_from_excel_file(excel_output)
        else:
            summary = "Conversion failed"

    # Step 3Ô∏è‚É£: Fallback to PDF text search if both failed
    if not summary or summary.strip() == "" or summary.startswith("Error"):
        pdf_summary = extract_summary_from_pdf_text(pdf_path)
        if pdf_summary:
            summary = pdf_summary

    # Step 4Ô∏è‚É£: Default if nothing found
    if not summary or summary.strip() == "":
        summary = "Not found"

    results.append({"PDF_File_Name": file, "Activity_Summary": summary})


# === SAVE RESULTS ===
df = pd.DataFrame(results)
df.to_excel(output_file, index=False)
print(f"\n‚úÖ Extraction Complete! Results saved to:\n{output_file}")
