import os
import pandas as pd
import subprocess

# === CONFIGURATION ===
root_folder = r"C:\Users\TAQ7353\UTR\LOB_ActivitySummary_FillingRate"  # top-level folder to walk
master_output = os.path.join(root_folder, "Master_SummaryOfActivity_AllFolders.xlsx")

# Script file names (assumed to be in the same folder as this script)
embedded_script_name = "extract_embedded_excel.py"
camelot_script_name = "extract_camelot_summary.py"

# === STORAGE FOR FINAL COMBINED RESULTS ===
all_results = []

# === RECURSIVELY WALK THROUGH FOLDERS ===
for base_folder, subdirs, files in os.walk(root_folder):
    pdf_files = [f for f in files if f.lower().endswith(".pdf")]
    if not pdf_files:
        continue  # skip folders without PDFs

    print(f"\nüìÅ Processing folder: {base_folder}")
    os.environ["PDF_FOLDER"] = base_folder
    os.environ["OUTPUT_FILE_PDF_EMAILS"] = "SummaryOfActivity_PDFEmails.xlsx"
    os.environ["OUTPUT_FILE_PDF_EXCELSAVED"] = "SummaryOfActivity_PDFExcelSaved.xlsx"

    output_combined = os.path.join(base_folder, "SummaryOfActivity_Combined.xlsx")
    file_camelot = os.path.join(base_folder, os.environ["OUTPUT_FILE_PDF_EMAILS"])
    file_embedded = os.path.join(base_folder, os.environ["OUTPUT_FILE_PDF_EXCELSAVED"])

    # === STEP 1: Run embedded Excel extractor ===
    print("‚ñ∂ Running embedded Excel extraction...")
    subprocess.run(["python", os.path.join(root_folder, embedded_script_name)], check=False)

    # === STEP 2: Run Camelot parser ===
    print("‚ñ∂ Running Camelot text extraction for remaining PDFs...")
    subprocess.run(["python", os.path.join(root_folder, camelot_script_name)], check=False)

    # === STEP 3: Combine results ===
    print("üîó Combining extracted results...")
    try:
        df_camelot = pd.read_excel(file_camelot)
        df_embedded = pd.read_excel(file_embedded)
    except Exception as e:
        print(f"‚ö†Ô∏è Skipping folder {base_folder} due to read error: {e}")
        continue

    invalid_values = [
        "Not found",
        "Summary of Activity*: (please indicate any additional customers or non-customers involved in this section)"
    ]

    for idx, row in df_camelot.iterrows():
        if str(row["Summary_of_Activity"]).strip() == "Not found":
            pdf_name = row["PDF_File_Name"]
            match = df_embedded[df_embedded["PDF_File_Name"].str.strip().eq(str(pdf_name).strip())]
            if not match.empty:
                new_val = str(match.iloc[0]["Summary_of_Activity"]).strip()
                if new_val and new_val not in invalid_values:
                    df_camelot.at[idx, "Summary_of_Activity"] = new_val

    # Add folder path column
    df_camelot["Folder_Path"] = base_folder

    # Save combined result for this folder
    df_camelot.to_excel(output_combined, index=False)
    print(f"‚úÖ Combined result saved to: {output_combined}")

    # === STEP 4: CLEANUP INTERMEDIATE FILES ===
    print("üßπ Cleaning up temporary Excel files...")
    try:
        # remove temporary output files
        for temp_file in [file_camelot, file_embedded]:
            if os.path.exists(temp_file):
                os.remove(temp_file)
                print(f"  üóëÔ∏è Deleted: {os.path.basename(temp_file)}")

        # remove extracted Excel attachments (prefixed with 'extracted_')
        for f in os.listdir(base_folder):
            if f.lower().startswith("extracted_") and f.lower().endswith(".xlsx"):
                os.remove(os.path.join(base_folder, f))
                print(f"  üóëÔ∏è Deleted extracted attachment: {f}")

    except Exception as e:
        print(f"‚ö†Ô∏è Cleanup failed in {base_folder}: {e}")

    # Append this folder‚Äôs result to the master list
    all_results.append(df_camelot)

# === FINAL MASTER MERGE ===
if all_results:
    df_master = pd.concat(all_results, ignore_index=True)
    df_master.to_excel(master_output, index=False)
    print(f"\nüéØ Master Summary created for ALL folders:\n{master_output}")
else:
    print("\n‚ö†Ô∏è No results found in any folder.")

print("\n‚ú® All subfolders processed successfully!")
