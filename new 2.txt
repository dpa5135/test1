import os
import re
import io
import pandas as pd
import fitz  # PyMuPDF
import aspose.pdf as ap
from openpyxl import load_workbook
from PyPDF2 import PdfReader

# === CONFIGURATION ===
pdf_folder = r"C:\Users\TAQ7353\UTR\LOB_ActivitySummary_FillingRate\test"
converted_folder = os.path.join(pdf_folder, "converted_excels")
output_file = os.path.join(pdf_folder, "activity_summary_results_unified.xlsx")
os.makedirs(converted_folder, exist_ok=True)


# === STEP 1: Try extracting embedded Excel (email PDFs) ===
def extract_embedded_excel(pdf_path):
    try:
        with fitz.open(pdf_path) as doc:
            for xref in range(1, doc.xref_length()):
                obj = doc.xref_object(xref)
                if ".xlsx" in obj:
                    data = doc.xref_stream(xref)
                    name_match = re.search(r"/F\s*\(([^)]+\.xlsx)\)", obj)
                    name = name_match.group(1) if name_match else "embedded.xlsx"
                    return data, name
    except Exception:
        pass
    return None, None


# === STEP 2: Convert PDF ‚Üí Excel (Aspose) ===
def convert_pdf_to_excel(pdf_path, excel_path):
    try:
        doc = ap.Document(pdf_path)
        doc.save(excel_path, ap.SaveFormat.EXCEL)
        return True
    except Exception as e:
        print(f"‚ùå Failed to convert {os.path.basename(pdf_path)}: {e}")
        return False


# === STEP 3: Extract Summary of Activity from Excel ===
def extract_summary_from_excel(excel_path):
    try:
        wb = load_workbook(excel_path, data_only=True)
        ws = wb.active
        for row in ws.iter_rows():
            for cell in row:
                val = str(cell.value).strip() if cell.value else ""
                if re.search(r"\bSummary\s*of\s*Activity\b", val, re.IGNORECASE):
                    below_row = cell.row + 1
                    for offset in range(0, 8):
                        next_val = ws.cell(row=below_row + offset, column=cell.column).value
                        if next_val:
                            return str(next_val).strip()
        return "Not found"
    except Exception as e:
        return f"Error reading Excel: {e}"


# === STEP 4: Fallback ‚Äî Extract directly from PDF text ===
def extract_summary_from_pdf_text(pdf_path):
    try:
        reader = PdfReader(pdf_path)
        text = ""
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + " "
        match = re.search(r"Summary\s*of\s*Activity[:\s\-]*(.*)", text, re.IGNORECASE)
        return match.group(1).strip() if match else "Not found"
    except Exception as e:
        return f"Error reading PDF: {e}"


# === STEP 5: Main Process ===
results = []

for file in os.listdir(pdf_folder):
    if not file.lower().endswith(".pdf"):
        continue

    pdf_path = os.path.join(pdf_folder, file)
    print(f"\nüìÑ Processing: {file}")
    summary = None

    # 1Ô∏è‚É£ Try extracting embedded Excel
    excel_bytes, excel_name = extract_embedded_excel(pdf_path)
    if excel_bytes:
        embedded_path = os.path.join(converted_folder, f"embedded_{excel_name}")
        with open(embedded_path, "wb") as f:
            f.write(excel_bytes)
        print(f"üß© Found embedded Excel: {excel_name}")
        summary = extract_summary_from_excel(embedded_path)

    # 2Ô∏è‚É£ Otherwise, convert PDF ‚Üí Excel (Aspose)
    if not excel_bytes:
        excel_path = os.path.join(converted_folder, file.replace(".pdf", ".xlsx"))
        if convert_pdf_to_excel(pdf_path, excel_path):
            print(f"‚úÖ Converted to Excel: {excel_path}")
            summary = extract_summary_from_excel(excel_path)
        else:
            summary = "Conversion failed"

    # 3Ô∏è‚É£ If nothing found, fallback to text extraction
    if not summary or summary.strip() in ["Not found", "Conversion failed"]:
        print("üîç Falling back to text extraction...")
        summary = extract_summary_from_pdf_text(pdf_path)

    results.append({"PDF_File_Name": file, "Activity_Summary": summary})


# === SAVE RESULTS ===
df = pd.DataFrame(results)
df.to_excel(output_file, index=False)
print(f"\n‚úÖ Extraction complete! Results saved to: {output_file}")
