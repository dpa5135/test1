import os
import re
import io
import fitz  # PyMuPDF
import pandas as pd
from openpyxl import load_workbook

# === CONFIGURATION ===
pdf_folder = r"C:\Users\TAQ7353\UTR\LOB_ActivitySummary_FillingRate\test"
output_file = os.path.join(pdf_folder, "activity_summary_results_FINAL.xlsx")

# Regex pattern for ‚ÄúSummary of Activity‚Äù
SUMMARY_LABEL = re.compile(r"\bsummary\s*of\s*activity\b", re.IGNORECASE)


# === FUNCTION 1: Extract embedded Excel (for PDFs with attachments) ===
def extract_embedded_excel(pdf_path):
    """
    Extracts embedded Excel files from PDFs (like email attachments).
    Returns: (excel_bytes, filename) or (None, None)
    """
    try:
        with fitz.open(pdf_path) as doc:
            # Try built-in attachments API
            try:
                for att in doc.attachments():
                    name = att.get("filename", "")
                    if name.lower().endswith(".xlsx"):
                        return att["filedata"], name
            except Exception:
                pass

            # Fallback: manually scan xrefs
            for xref in range(1, doc.xref_length()):
                try:
                    obj = doc.xref_object(xref)
                    if ".xlsx" in obj:
                        match = re.search(r"/F\s*\(([^)]+\.xlsx)\)", obj)
                        data = doc.xref_stream(xref)
                        if data:
                            filename = match.group(1) if match else "embedded.xlsx"
                            return data, filename
                except Exception:
                    continue
    except Exception as e:
        print(f"‚ö†Ô∏è Attachment scan failed for {pdf_path}: {e}")
    return None, None


# === FUNCTION 2: Extract Summary from Excel File ===
def extract_summary_from_excel_bytes(excel_bytes):
    """
    Reads the Excel binary stream and extracts text below 'Summary of Activity'
    """
    try:
        wb = load_workbook(io.BytesIO(excel_bytes), data_only=True)
        ws = wb.active

        for row in ws.iter_rows():
            for cell in row:
                val = str(cell.value).strip() if cell.value else ""
                if SUMMARY_LABEL.search(val):
                    below_row = cell.row + 1
                    for offset in range(0, 8):
                        nxt = ws.cell(row=below_row + offset, column=cell.column).value
                        if nxt:
                            return str(nxt).strip()
        return "Not found"
    except Exception as e:
        return f"Error reading Excel: {e}"


# === FUNCTION 3: Extract Summary directly from PDF text ===
def extract_summary_from_pdf_text(pdf_path):
    """
    Reads visible text in PDFs saved from Excel or scanned reports.
    Looks for 'Summary of Activity' and returns the text that follows.
    """
    try:
        with fitz.open(pdf_path) as doc:
            for page in doc:
                blocks = page.get_text("blocks")
                blocks.sort(key=lambda b: (round(b[1], 1), round(b[0], 1)))  # top-to-bottom order

                for i, b in enumerate(blocks):
                    text = (b[4] or "").strip()
                    if not text:
                        continue

                    # Look for header
                    if SUMMARY_LABEL.search(text):
                        after = SUMMARY_LABEL.split(text, 1)[-1].strip(" :-\n\t")
                        if after:
                            return after.strip()

                        # Otherwise, read the next text block
                        for j in range(i + 1, min(i + 5, len(blocks))):
                            nxt = (blocks[j][4] or "").strip()
                            if nxt:
                                return nxt.splitlines()[0].strip()
        return "Not found"
    except Exception as e:
        return f"Error reading PDF: {e}"


# === MAIN PROCESS ===
results = []

for file in os.listdir(pdf_folder):
    if not file.lower().endswith(".pdf"):
        continue

    pdf_path = os.path.join(pdf_folder, file)
    print(f"\nüìÑ Processing: {file}")

    summary = None

    # Step 1Ô∏è‚É£ Try to extract embedded Excel
    excel_bytes, excel_name = extract_embedded_excel(pdf_path)
    if excel_bytes:
        print(f"üß© Found embedded Excel: {excel_name}")
        summary = extract_summary_from_excel_bytes(excel_bytes)

    # Step 2Ô∏è‚É£ If no Excel found, extract directly from PDF text
    if not summary or summary.strip() in ["", "Not found"] or summary.startswith("Error"):
        print("üîç Extracting directly from PDF text...")
        summary = extract_summary_from_pdf_text(pdf_path)

    results.append({"PDF_File_Name": file, "Activity_Summary": summary})


# === SAVE RESULTS ===
df = pd.DataFrame(results)
df.to_excel(output_file, index=False)
print(f"\n‚úÖ Extraction complete! Clean results saved to: {output_file}")
