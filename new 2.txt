import os
import re
import io
import pandas as pd
import fitz  # PyMuPDF
import aspose.pdf as ap
from openpyxl import load_workbook
from PyPDF2 import PdfReader

# === CONFIG ===
pdf_folder = r"C:\Users\TAQ7353\UTR\LOB_ActivitySummary_FillingRate\test"
converted_folder = os.path.join(pdf_folder, "converted_excels")
output_summary = os.path.join(pdf_folder, "activity_summary_results_Universal.xlsx")
os.makedirs(converted_folder, exist_ok=True)

SUMMARY_RE = re.compile(r"\bsummary\s*of\s*activity\b", re.IGNORECASE)

# ---- 1) Try to extract an embedded Excel (email-style PDFs) ----
def extract_embedded_excel(pdf_path):
    try:
        with fitz.open(pdf_path) as doc:
            # Newer PyMuPDF API
            try:
                for att in doc.attachments():
                    name = att.get("filename", "")
                    if name.lower().endswith(".xlsx"):
                        return att["filedata"], name
            except Exception:
                pass
            # Fallback: scan xrefs (works on many PDFs)
            for xref in range(1, doc.xref_length()):
                try:
                    obj = doc.xref_object(xref)
                    if ".xlsx" in obj:
                        m = re.search(r"/F\s*\(([^)]+\.xlsx)\)", obj)
                        data = doc.xref_stream(xref)
                        if data:
                            return data, (m.group(1) if m else "embedded.xlsx")
                except Exception:
                    continue
    except Exception as e:
        print(f"  ‚ö†Ô∏è attachment scan error: {e}")
    return None, None

# ---- 2) Convert PDF -> Excel (aspose.pdf) ----
def convert_pdf_to_excel(pdf_path, excel_path):
    try:
        doc = ap.Document(pdf_path)
        # Use only the stable save format (no options that crash on some builds)
        doc.save(excel_path, ap.SaveFormat.EXCEL)
        return True
    except Exception as e:
        print(f"  ‚ùå Failed to convert {os.path.basename(pdf_path)}: {e}")
        return False

# ---- 3) Extract summary from an .xlsx (search ALL worksheets) ----
def extract_summary_from_excel(excel_path):
    try:
        wb = load_workbook(excel_path, data_only=True)
        for ws in wb.worksheets:
            for row in ws.iter_rows():
                for cell in row:
                    val = (str(cell.value).strip() if cell.value is not None else "")
                    if SUMMARY_RE.search(val):
                        # look downwards in the same column for the first non-empty cell
                        start_row = cell.row + 1
                        for offset in range(0, 12):  # look up to 12 rows below
                            v = ws.cell(row=start_row + offset, column=cell.column).value
                            if v not in (None, ""):
                                return str(v).strip()
        return "Not found"
    except Exception as e:
        return f"Error reading Excel: {e}"

# ---- 4) Fallback: extract from PDF text ----
def extract_summary_from_pdf_text(pdf_path):
    try:
        reader = PdfReader(pdf_path)
        txt = ""
        for p in reader.pages:
            t = p.extract_text()
            if t:
                txt += t + "\n"
        m = re.search(r"Summary\s*of\s*Activity[:\s\-]*([\s\S]{0,800})", txt, re.IGNORECASE)
        if m:
            # take the first line after the label
            return m.group(1).splitlines()[0].strip() or "Not found"
        return "Not found"
    except Exception as e:
        return f"Error reading PDF: {e}"

# ================= MAIN =================
rows = []
for fname in os.listdir(pdf_folder):
    if not fname.lower().endswith(".pdf"):
        continue
    pdf_path = os.path.join(pdf_folder, fname)
    print(f"\nüìÑ Processing: {fname}")
    summary = None

    # A) Try embedded Excel first
    excel_bytes, excel_name = extract_embedded_excel(pdf_path)
    if excel_bytes:
        saved_path = os.path.join(converted_folder, f"embedded_{excel_name}")
        with open(saved_path, "wb") as f:
            f.write(excel_bytes)
        print(f"  üß© Found embedded Excel: {excel_name}")
        summary = extract_summary_from_excel(saved_path)

    # B) If no embedded Excel or not found, convert PDF -> Excel
    if not summary or summary in ("", "Not found") or str(summary).startswith("Error"):
        xlsx_out = os.path.join(converted_folder, os.path.splitext(fname)[0] + ".xlsx")
        if convert_pdf_to_excel(pdf_path, xlsx_out):
            print(f"  ‚úÖ Converted to Excel: {xlsx_out}")
            summary = extract_summary_from_excel(xlsx_out)
        else:
            print("  ‚ö†Ô∏è Conversion failed")

    # C) Fallback to PDF text if needed
    if not summary or summary in ("", "Not found") or str(summary).startswith("Error"):
        print("  üîé Falling back to text extraction‚Ä¶")
        summary = extract_summary_from_pdf_text(pdf_path)

    rows.append({"PDF_File_Name": fname, "Activity_Summary": summary})

# Save results
df = pd.DataFrame(rows)
df.to_excel(output_summary, index=False)
print(f"\n‚úÖ Done. Results saved to: {output_summary}")
